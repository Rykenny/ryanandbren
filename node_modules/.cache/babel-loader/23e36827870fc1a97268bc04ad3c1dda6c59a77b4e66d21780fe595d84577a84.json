{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst app = express();\nconst port = 5001; // Or the port you're using\n\napp.use(cors());\napp.use(express.json());\n\n// Load guest data from JSON file\nlet guestData = JSON.parse(fs.readFileSync('./data/guestData.json'));\n\n// RSVP endpoint\napp.post('/rsvp', (req, res) => {\n  console.log('Received RSVP request:', req.body);\n  const {\n    code,\n    rsvpStatus,\n    allergies\n  } = req.body; // Get allergies from request\n\n  if (guestData[code]) {\n    guestData[code].rsvp = rsvpStatus;\n    guestData[code].allergies = allergies; // Update allergies in guestData\n\n    // Write updated data back to JSON file\n    fs.writeFileSync('./data/guestData.json', JSON.stringify(guestData, null, 2));\n    res.json({\n      message: 'RSVP received!'\n    });\n  } else {\n    res.status(400).json({\n      error: 'Invalid code'\n    });\n  }\n});\n\n// Endpoint to serve guest data\napp.get('/guestData', (req, res) => {\n  res.json(guestData);\n});\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});","map":{"version":3,"names":["express","require","cors","fs","app","port","use","json","guestData","JSON","parse","readFileSync","post","req","res","console","log","body","code","rsvpStatus","allergies","rsvp","writeFileSync","stringify","message","status","error","get","listen"],"sources":["/Users/brenna.sorkin/Documents/my-wedding-rsvp/src/RSVP.js"],"sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst app = express();\nconst port = 5001; // Or the port you're using\n\napp.use(cors());\napp.use(express.json());\n\n// Load guest data from JSON file\nlet guestData = JSON.parse(fs.readFileSync('./data/guestData.json'));\n\n// RSVP endpoint\napp.post('/rsvp', (req, res) => {\n  console.log('Received RSVP request:', req.body);\n\n  const { code, rsvpStatus, allergies } = req.body; // Get allergies from request\n\n  if (guestData[code]) {\n    guestData[code].rsvp = rsvpStatus;\n    guestData[code].allergies = allergies; // Update allergies in guestData\n\n    // Write updated data back to JSON file\n    fs.writeFileSync('./data/guestData.json', JSON.stringify(guestData, null, 2));\n    res.json({ message: 'RSVP received!' });\n  } else {\n    res.status(400).json({ error: 'Invalid code' });\n  }\n});\n\n// Endpoint to serve guest data\napp.get('/guestData', (req, res) => {\n  res.json(guestData);\n});\n\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI,CAAC,CAAC;;AAEnBD,GAAG,CAACE,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AACfE,GAAG,CAACE,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACP,EAAE,CAACQ,YAAY,CAAC,uBAAuB,CAAC,CAAC;;AAEpE;AACAP,GAAG,CAACQ,IAAI,CAAC,OAAO,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC9BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,GAAG,CAACI,IAAI,CAAC;EAE/C,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAU,CAAC,GAAGP,GAAG,CAACI,IAAI,CAAC,CAAC;;EAElD,IAAIT,SAAS,CAACU,IAAI,CAAC,EAAE;IACnBV,SAAS,CAACU,IAAI,CAAC,CAACG,IAAI,GAAGF,UAAU;IACjCX,SAAS,CAACU,IAAI,CAAC,CAACE,SAAS,GAAGA,SAAS,CAAC,CAAC;;IAEvC;IACAjB,EAAE,CAACmB,aAAa,CAAC,uBAAuB,EAAEb,IAAI,CAACc,SAAS,CAACf,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7EM,GAAG,CAACP,IAAI,CAAC;MAAEiB,OAAO,EAAE;IAAiB,CAAC,CAAC;EACzC,CAAC,MAAM;IACLV,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;MAAEmB,KAAK,EAAE;IAAe,CAAC,CAAC;EACjD;AACF,CAAC,CAAC;;AAEF;AACAtB,GAAG,CAACuB,GAAG,CAAC,YAAY,EAAE,CAACd,GAAG,EAAEC,GAAG,KAAK;EAClCA,GAAG,CAACP,IAAI,CAACC,SAAS,CAAC;AACrB,CAAC,CAAC;AAEFJ,GAAG,CAACwB,MAAM,CAACvB,IAAI,EAAE,MAAM;EACrBU,OAAO,CAACC,GAAG,CAAC,4BAA4BX,IAAI,EAAE,CAAC;AACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}